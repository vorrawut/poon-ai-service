# Docker Management for Poon AI Service
.PHONY: help build up down restart logs clean test health status

# Colors
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

help: ## üìñ Show this help message
	@echo "$(BLUE)Poon AI Service - Docker Management$(NC)"
	@echo ""
	@echo "$(GREEN)Available commands:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(BLUE)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

build: ## üî® Build all services
	@echo "$(BLUE)Building services...$(NC)"
	cd .. && docker-compose build --no-cache

up: ## üöÄ Start all services
	@echo "$(BLUE)Starting services...$(NC)"
	cd .. && docker-compose up -d
	@echo "$(GREEN)Services started! Use 'make status' to check health.$(NC)"

up-with-monitoring: ## üìä Start all services including monitoring
	@echo "$(BLUE)Starting services with monitoring...$(NC)"
	cd .. && docker-compose --profile monitoring up -d
	@echo "$(GREEN)Services with monitoring started!$(NC)"

down: ## üõë Stop all services
	@echo "$(BLUE)Stopping services...$(NC)"
	cd .. && docker-compose down
	@echo "$(GREEN)Services stopped.$(NC)"

restart: ## üîÑ Restart all services
	@echo "$(BLUE)Restarting services...$(NC)"
	cd .. && docker-compose restart
	@echo "$(GREEN)Services restarted.$(NC)"

status: ## üìä Show service status
	@echo "$(BLUE)Service Status:$(NC)"
	@cd .. && docker-compose ps
	@echo ""
	@echo "$(BLUE)Health Checks:$(NC)"
	@echo -n "AI Service: "
	@if curl -s http://localhost:8001/health | grep -q "healthy"; then \
		echo "$(GREEN)‚úÖ Healthy$(NC)"; \
	else \
		echo "$(RED)‚ùå Unhealthy$(NC)"; \
	fi
	@echo -n "Ollama: "
	@if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ Healthy$(NC)"; \
	else \
		echo "$(RED)‚ùå Unhealthy$(NC)"; \
	fi
	@echo -n "Redis: "
	@if cd .. && docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ Healthy$(NC)"; \
	else \
		echo "$(RED)‚ùå Unhealthy$(NC)"; \
	fi

health: ## üè• Run comprehensive health check
	@echo "$(BLUE)Running health checks...$(NC)"
	@echo ""
	@echo "$(BLUE)1. Basic Health Check:$(NC)"
	curl -s http://localhost:8001/health | jq .
	@echo ""
	@echo "$(BLUE)2. Detailed Health Check:$(NC)"
	curl -s http://localhost:8001/api/v1/health/detailed | jq .
	@echo ""
	@echo "$(BLUE)3. AI Processing Test:$(NC)"
	curl -s -X POST http://localhost:8001/api/v1/spending/process/text \
		-H "Content-Type: application/json" \
		-d '{"text": "Coffee at Starbucks 120 baht", "language": "en"}' | jq .

test: ## üß™ Run basic API tests
	@echo "$(BLUE)Running API tests...$(NC)"
	@echo ""
	@echo "$(BLUE)Testing Health Endpoint:$(NC)"
	@if curl -s http://localhost:8001/health | grep -q "healthy"; then \
		echo "$(GREEN)‚úÖ Health check passed$(NC)"; \
	else \
		echo "$(RED)‚ùå Health check failed$(NC)"; \
	fi
	@echo ""
	@echo "$(BLUE)Testing Spending Entries:$(NC)"
	@if curl -s http://localhost:8001/api/v1/spending/ | grep -q "entries"; then \
		echo "$(GREEN)‚úÖ Spending entries endpoint working$(NC)"; \
	else \
		echo "$(RED)‚ùå Spending entries endpoint failed$(NC)"; \
	fi
	@echo ""
	@echo "$(BLUE)Testing Text Processing:$(NC)"
	@if curl -s -X POST http://localhost:8001/api/v1/spending/process/text \
		-H "Content-Type: application/json" \
		-d '{"text": "Lunch 250 baht", "language": "en"}' | grep -q "success"; then \
		echo "$(GREEN)‚úÖ Text processing working$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Text processing may be initializing$(NC)"; \
	fi

clean: ## üßπ Clean up containers and volumes
	@echo "$(YELLOW)Warning: This will remove all containers and volumes!$(NC)"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ]
	cd .. && docker-compose down -v
	docker system prune -f
	@echo "$(GREEN)Cleanup complete.$(NC)"

init-model: ## ü§ñ Initialize Ollama model
	@echo "$(BLUE)Initializing Llama model...$(NC)"
	cd .. && docker-compose exec ollama ollama pull llama3.2:3b
	@echo "$(GREEN)Model initialized!$(NC)"

shell-ai: ## üêö Open shell in AI service container
	cd .. && docker-compose exec ai-service bash

shell-ollama: ## üêö Open shell in Ollama container
	cd .. && docker-compose exec ollama bash

urls: ## üîó Show all service URLs
	@echo "$(BLUE)Service URLs:$(NC)"
	@echo "  ‚Ä¢ AI Service:    http://localhost:8001"
	@echo "  ‚Ä¢ API Docs:      http://localhost:8001/docs"
	@echo "  ‚Ä¢ Health Check:  http://localhost:8001/health"
	@echo "  ‚Ä¢ Metrics:       http://localhost:8001/metrics"
	@echo "  ‚Ä¢ Ollama:        http://localhost:11434"
	@echo "  ‚Ä¢ Redis:         localhost:6379"
	@echo ""
	@echo "$(BLUE)Monitoring (if enabled):$(NC)"
	@echo "  ‚Ä¢ Prometheus:    http://localhost:9090"
	@echo "  ‚Ä¢ Grafana:       http://localhost:3000 (admin/admin)"

dev: ## üõ†Ô∏è Start development environment
	@echo "$(BLUE)Starting development environment...$(NC)"
	./start.sh

# Default target
.DEFAULT_GOAL := help
